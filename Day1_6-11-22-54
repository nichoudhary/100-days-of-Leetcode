# 11. Container With Most Water
class Solution:
    def maxArea(self, height: List[int]) -> int:
        start = 0
        end = len(height) - 1
        max_area = -sys.maxsize - 1

        while end > start:
            area = min(height[start], height[end])*(end - start)
            max_area = max(max_area, area)
            if height[start] > height[end]:
                end -= 1
            else:
                start += 1
                
        return max_area

# Time Complexity = O(n)


# 22. Generate Parentheses
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:

        if n == 0:
            return []
        if n == 1:
            return ["()"]
        if n == 2:
            return ["()()", "(())"]
        ans_prev = self.generateParenthesis(n-1)
        empty_set = set()
        for pattern in ans_prev:
            for i in range(len(pattern)+1):
                empty_set.add(pattern[:i] + "()" + pattern[i:])
        return list(empty_set)

    #Time Complexity = O(4^n/n^0.5)

#54. Spiral Matrix
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        rows, cols = len(matrix), len(matrix[0])
        up, left, down, right = 0, 0, rows-1, cols-1
        ans_list = []

        while len(ans_list) < (rows * cols):
            for j in range(left, right+1):
                ans_list.append(matrix[up][j])
            for i in range(up+1, down+1):
                ans_list.append(matrix[i][right])
            if up != down:
                for j in range(right-1, left-1, -1):
                    ans_list.append(matrix[down][j])

            if left != right:
                for i in range(down-1, up, -1):
                    ans_list.append(matrix[i][left])
            left += 1
            right -= 1
            up += 1
            down -= 1
        return ans_list

# Time Complexity = m*n



#6. Zigzag Conversion
class Solution:
    def convert(self, s: str, numRows: int) -> str:
        
        if numRows == 1:
            return s
        n = 2
        length = len(s)
        firstrow_s, i = "", 0
        while i < length:
            firstrow_s = firstrow_s + s[i]
            i = i + (numRows-0) + (numRows-2)
        
        for midrow in range(1, numRows-1):
            midrow_s = ""
            index = midrow
            while index < length:
                midrow_s = midrow_s + s[index]
                index = index + (numRows - midrow) + (numRows - (midrow+2))
                if index < length:
                    midrow_s = midrow_s + s[index]
                index = index + n
            firstrow_s = firstrow_s + midrow_s
            n += 2
        
        lastrow_s, i = "", numRows-1
        while i < length:
            lastrow_s = lastrow_s + s[i]
            i = i + (numRows-0) + (numRows-2)
        
        return firstrow_s + lastrow_s

#Time Complexity = O(n)

        


        

        
