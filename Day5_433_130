#433. Minimum Genetic Mutation

class Solution:

    def getCombinations(self, gene:str, geneset:set, visited:set) -> List[str]:

        ans = []

        for c in "ACGT":
            for i in range(0, len(gene)):
                option = gene[:i] + c + gene[i+1:]
                if option in geneset and option not in visited:
                    ans.append(option)
        return ans



    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:
        geneset = set()
        visited = set()
        for i in range(0, len(bank)):
            geneset.add(bank[i])

        q = deque()
        q.append([startGene, 0])

        while q:
            element = q.popleft()
            gene, level = element[0], element[1]
            visited.add(gene)
            if gene == endGene:
                return level
            validGeneCombinations = self.getCombinations(gene, geneset, visited)
            for i in range(0, len(validGeneCombinations)):
                q.append([validGeneCombinations[i], level+1])

        return -1

#Time Complexity: O(n)
#Space Complexity: O(n)




#130. Surrounded Regions
class Solution:

    def dfs(self, board: List[List[str]], i:int, j:int, n:int, m:int):
        if i < 0 or i >= n or j < 0 or j >=m or board[i][j] != "O" or board[i][j] == "Z":
            return
        board[i][j] = "Z"

        self.dfs(board, i+1, j, n, m)
        self.dfs(board, i-1, j, n, m)
        self.dfs(board, i, j+1, n, m)
        self.dfs(board, i, j-1, n, m)

        return
        

    def solve(self, board: List[List[str]]) -> None:
        n, m = len(board), len(board[0])
        for i in range(0, n):
            for j in range(0, m):
                if (i == 0 or j == 0 or i == n-1 or j == m-1) and board[i][j] == "O":
                    self.dfs(board, i, j, n, m)

        for i in range(0, n):
            for j in range(0, m):
                if board[i][j] == "O":
                    board[i][j] = "X"
                elif board[i][j] == "Z":
                    board[i][j] = "O"
        
        return
#Time Complexity: O(nxm)
#Space Complexity: O(nxm) due to recursion stack

        
