#5. Longest Palindromic Substring
class Solution:
    def longestPalindrome(self, s: str) -> str:
        max_len = 0
        max_pal = ""

        if len(s) > 0:
            max_len = 1
            max_pal = s[0]

        for i in range(0, len(s)-1):
            if s[i] == s[i+1]:
                left = i-1
                right = i+2
                while left >= 0 and right < len(s):
                    if s[left] == s[right]:
                        left -= 1
                        right += 1
                    else:
                        break
                if right - left - 1 >= max_len:
                    max_len = right - left - 1
                    max_pal = s[left+1:right]
            
            left = i-1
            right = i+1
            while left >= 0 and right < len(s):
                if s[left] == s[right]:
                    left -= 1
                    right += 1
                else:
                    break
            if right - left - 1 >= max_len:
                max_len = right - left - 1
                max_pal = s[left+1:right]


        return max_pal

# Time Complexity - O(n^2)
